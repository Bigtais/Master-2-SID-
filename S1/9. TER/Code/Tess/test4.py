def intersection(indices1, indices2):
    """Return a new list containing common indices between two given lists."""
    return [i for i in indices1 if i in indices2]

def compute_transversals(hypergraph):
    """
    Compute approximate transversals of an hypergraph using the growth greedy algorithm.
    
    Parameters:
        hypergraph (list of list): A list of lists representing the hyperedges of the hypergraph.
                               Each inner list contains the indices of the nodes that are connected by the corresponding hyperedge.
        
    Returns:
        list of set: A list of sets representing the approximate transversals of the hypergraph.
                   Each set contains the indices of the nodes in the transversal.
    """
    # Convert each hyperedge into tuple to avoid unwanted changes during execution
    hypergraph = [tuple(e) for e in hypergraph]

    # Initialize empty transversals and covered edges lists
    transversals = []
    covered_edges = []

    # Continue until all edges are covered
    while len(covered_edges) < len(hypergraph):
        # Find the node with the maximum number of incident uncovered edges
        max_node = None
        max_count = -1
        for node in range(len(hypergraph)):
            uncovered_edges = [i for i in hypergraph[node] if i not in covered_edges]
            if len(uncovered_edges) > max_count:
                max_node = node
                max_count = len(uncovered_edges)
        
        # Add the selected node to the current transversal
        transversal = {max_node}

        # Update the covered edges based on the new transversal
        covered_edges.extend(hypergraph[max_node])
        for edge in hypergraph:
            if any(i in transversal for i in edge):
                covered_edges.append(tuple(sorted(edge)))

        # Add the new transversal to the list of transversals
        transversals.append(transversal)

    # Convert back the final results as sets instead of tuples
    transversals = [{ind for ind in tup} for tup in transversals]

    return transversals


# Define an hypergraph as a list of sets
hypergraph = [[16, 91, 21, 24, 20, 70, 30, 19, 84, 15, 102], [90, 31, 32, 6, 80, 110, 49, 20, 103, 16, 37], [25, 93, 37, 110, 70, 23, 4, 106, 113, 54, 76], [106, 19, 29, 4, 67, 32, 103, 109, 30, 18], [25, 44, 1, 63, 27, 61, 30, 58, 53, 111, 73], [63, 27, 89, 70, 1, 74, 35, 98, 20, 18, 28], [108, 4, 105, 79, 116, 91, 22, 42, 83, 21, 78], [108, 69, 2, 41, 70, 98, 112, 93, 111, 114, 109], [11, 105, 31, 113, 4, 77, 13, 28, 67, 39, 7], [29, 44, 7, 75, 64, 41, 63, 105, 116, 72, 16], [62, 71, 65, 30, 56, 52, 95, 7, 111, 107, 66], [35, 23, 52, 3, 95, 40, 69, 5, 72, 11, 12], [116, 107, 9, 76, 66, 29, 35, 37, 104, 96, 59], [75, 73, 110, 55, 10, 37, 99, 25, 113, 84], [22, 61, 52, 3, 9, 72, 31, 38, 105, 101, 33], [104, 60, 58, 68, 92, 39, 52, 77, 99, 82, 2], [47, 46, 112, 42, 82, 4, 39, 54, 114, 101], [17, 68, 1, 66, 38, 72, 98, 6, 70, 22, 13], [62, 4, 114, 27, 24, 66, 60, 59, 21, 106, 8], [16, 32, 15, 51, 103, 116, 100, 57, 38, 94, 73], [92, 43, 56, 28, 45, 22, 89, 80, 10, 111, 73], [64, 43, 73, 12, 108, 94, 107, 26, 72, 47, 19], [12, 60, 15, 59, 8, 11, 39, 111, 109, 83, 31], [62, 43, 106, 69, 94, 88, 15, 37, 6, 29, 73], [42, 20, 34, 22, 98, 47, 116, 107, 8, 77, 41], [25, 38, 35, 112, 46, 70, 88, 3, 91, 92], [2, 100, 4, 50, 49, 51, 39, 61, 92, 63], [9, 107, 29, 112, 80, 66, 12, 58, 103, 41], [104, 23, 84, 11, 94, 52, 96, 1, 27, 68, 61], [93, 106, 52, 72, 11, 19, 45, 116, 69, 99, 112], [3, 27, 107, 94, 78, 104, 72, 16, 2, 7, 21], [24, 105, 83, 58, 35, 33, 69, 113, 89, 100, 36], [79, 21, 55, 95, 77, 102, 108, 27, 62, 10, 67], [35, 111, 67, 116, 52, 49, 8, 110, 60, 91, 50], [97, 48, 66, 77, 16, 103, 5, 60, 65, 94], [72, 114, 105, 26, 102, 58, 49, 111, 76, 2], [74, 21, 81, 62, 2, 95, 96, 82, 107, 55], [49, 91, 83, 21, 116, 84, 78, 25, 24, 13], [79, 108, 112, 101, 27, 50, 22, 107, 62, 20, 103], [45, 94, 87, 115, 32, 23, 26, 12, 39, 98], [32, 26, 88, 77, 94, 3, 52, 12, 4, 50], [10, 94, 78, 75, 52, 41, 59, 26, 4, 98], [9, 74, 116, 107, 114, 96, 63, 5, 80, 75], [45, 69, 74, 21, 67, 93, 71, 10, 23, 92, 31], [89, 113, 87, 2, 69, 20, 84, 44, 115, 75], [104, 16, 53, 105, 30, 82, 59, 115, 5, 78, 25], [5, 47, 22, 109, 18, 60, 51, 87, 94, 17], [27, 53, 104, 51, 78, 88, 32, 23, 114, 71, 57], [95, 65, 43, 116, 99, 75, 80, 108, 110, 57, 35], [58, 104, 23, 101, 80, 95, 114, 68, 16, 20], [65, 69, 62, 99, 57, 15, 41, 5, 63, 21, 9], [1, 72, 22, 28, 101, 77, 49, 96, 71, 106, 26], [24, 67, 116, 101, 26, 60, 78, 33, 92, 12, 36], [21, 105, 2, 27, 56, 82, 37, 104, 66, 26, 5], [91, 99, 7, 30, 82, 18, 107, 6, 24, 56, 43], [88, 70, 42, 44, 81, 90, 58, 101, 33, 103], [1, 41, 100, 22, 61, 54, 107, 88, 89, 31], [32, 49, 27, 81, 67, 44, 70, 78, 103, 7], [7, 43, 24, 39, 91, 63, 42, 16, 71, 5, 66], [66, 23, 51, 12, 78, 42, 49, 81, 60, 53, 15], [56, 6, 24, 32, 17, 91, 59, 35, 77, 52, 115], [61, 9, 5, 76, 101, 67, 16, 89, 39, 100, 94], [94, 65, 61, 103, 116, 82, 4, 42, 88, 30, 104], [110, 74, 20, 35, 24, 89, 93, 10, 112, 45, 97], [18, 28, 12, 1, 54, 106, 7, 115, 56, 30, 19], [29, 96, 84, 102, 33, 99, 64, 50, 89, 55, 16], [16, 50, 48, 87, 13, 110, 103, 63, 92, 108, 61], [79, 73, 110, 11, 97, 26, 93, 81, 36, 37, 10], [47, 111, 25, 98, 67, 20, 108, 40, 33, 12, 73], [88, 76, 32, 62, 13, 23, 48, 6, 43, 1, 97], [67, 54, 21, 15, 18, 28, 9, 13, 71, 1, 37], [57, 80, 14, 16, 83, 17, 76, 75, 55, 38], [69, 59, 22, 6, 31, 72, 63, 12, 21, 101, 92], [19, 90, 58, 73, 92, 72, 6, 113, 28, 74], [88, 34, 26, 100, 20, 72, 49, 95, 22, 76, 50], [7, 55, 103, 38, 80, 48, 92, 51, 9, 64], [50, 110, 37, 21, 44, 82, 65, 105, 46, 5], [112, 82, 72, 57, 84, 28, 81, 64, 87, 43, 23], [10, 98, 15, 57, 54, 92, 28, 102, 46, 89], [23, 69, 71, 54, 35, 14, 94, 38, 15, 20], [115, 91, 8, 68, 95, 103, 40, 93, 51, 48], [109, 10, 12, 99, 93, 97, 116, 41, 108, 103], [52, 43, 97, 49, 46, 66, 113, 56, 102, 114], [110, 62, 30, 89, 24, 56, 88, 107, 59, 92], [14, 95, 46, 17, 24, 75, 82, 15, 90, 11], [77, 65, 51, 70, 52, 92, 113, 50, 66, 23], [50, 105, 77, 59, 91, 69, 61, 15, 19, 3], [71, 8, 88, 106, 73, 62, 11, 23, 78, 39, 68], [69, 58, 82, 48, 49, 95, 71, 40, 8, 9], [31, 79, 43, 101, 26, 63, 25, 67, 112, 75], [78, 95, 35, 65, 24, 55, 89, 28, 115, 101], [77, 15, 8, 61, 29, 102, 80, 63, 20, 65, 59], [18, 1, 5, 10, 45, 95, 106, 14, 116, 44, 59], [73, 3, 37, 27, 55, 90, 9, 74, 20, 7], [80, 8, 87, 60, 26, 58, 96, 114, 112, 65], [104, 77, 54, 87, 28, 89, 29, 91, 10, 48], [82, 73, 9, 79, 84, 19, 58, 7, 106, 24], [48, 26, 45, 83, 108, 92, 22, 95, 80, 18, 78], [11, 78, 51, 42, 43, 107, 68, 15, 38, 23, 76], [95, 5, 12, 10, 68, 50, 35, 101, 44, 30, 18], [105, 7, 39, 115, 104, 58, 36, 22, 81, 35], [15, 108, 38, 56, 33, 106, 17, 99, 84, 10, 23], [54, 111, 106, 66, 48, 17, 7, 25, 1, 88], [108, 48, 33, 93, 88, 28, 30, 99, 47, 69], [57, 107, 56, 29, 15, 45, 38, 13, 101, 41], [75, 24, 19, 92, 30, 11, 102, 6, 107, 15], [52, 58, 28, 33, 112, 95, 110, 46, 43, 96, 60], [84, 80, 100, 88, 66, 116, 111, 68, 76, 33, 47], [7, 78, 79, 10, 65, 114, 55, 2, 72, 62, 1], [55, 51, 84, 72, 65, 30, 53, 49, 76, 83], [7, 4, 110, 80, 59, 87, 29, 36, 44, 65, 64], [74, 100, 99, 78, 92, 96, 75, 106, 33, 56], [17, 10, 31, 111, 46, 110, 89, 57, 1, 73, 95], [107, 84, 93, 113, 91, 60, 38, 16, 53, 30, 8], [18, 4, 103, 17, 58, 96, 59, 115, 66, 68, 84], [108, 41, 114, 40, 48, 91, 56, 99, 39, 87], [24, 116, 37, 92, 8, 41, 4, 10, 40, 11], [30, 24, 36, 19, 4, 16, 20, 25, 62, 37], [81, 55, 99, 19, 39, 84, 66, 95, 89, 31], [100, 4, 56, 45, 8, 110, 116, 114, 23, 80], [109, 27, 12, 60, 62, 24, 112, 11, 99, 111], [48, 79, 81, 109, 54, 106, 7, 40, 44, 49], [110, 10, 87, 81, 112, 7, 52, 79, 68, 55], [71, 77, 104, 87, 61, 13, 8, 18, 46, 75], [113, 31, 107, 5, 26, 55, 48, 84, 35, 62], [60, 91, 30, 103, 67, 1, 42, 5, 113, 58], [31, 115, 44, 73, 107, 30, 35, 49, 108, 66], [24, 7, 36, 31, 114, 53, 1, 82, 110, 73], [108, 106, 4, 65, 81, 84, 13, 23, 92, 57], [108, 94, 13, 3, 20, 82, 66, 113, 47, 79], [101, 91, 105, 54, 43, 9, 94, 57, 55, 71], [46, 10, 83, 13, 111, 40, 99, 116, 1, 96], [98, 18, 69, 80, 114, 17, 109, 3, 106, 83], [98, 5, 15, 46, 91, 88, 31, 112, 107, 72], [92, 2, 11, 32, 103, 68, 25, 13, 59, 69], [44, 1, 5, 69, 33, 105, 55, 57, 88, 71], [110, 84, 1, 97, 91, 101, 88, 26, 20, 4], [47, 100, 50, 77, 29, 28, 49, 23, 15, 35], [31, 41, 94, 33, 27, 92, 90, 51, 59, 17], [14, 110, 84, 25, 32, 10, 92, 94, 58, 64], [101, 89, 49, 96, 36, 115, 93, 71, 94, 21, 44], [88, 64, 39, 44, 69, 58, 61, 79, 114, 19], [67, 5, 10, 25, 112, 106, 19, 113, 27, 45, 104], [4, 43, 111, 106, 90, 62, 24, 51, 68, 92], [76, 5, 82, 58, 51, 66, 109, 16, 78, 20], [57, 1, 72, 54, 87, 104, 79, 37, 75, 92, 6], [52, 17, 97, 28, 72, 39, 48, 15, 31, 89, 73], [95, 105, 114, 22, 38, 6, 97, 60, 5, 92, 33], [66, 96, 74, 7, 100, 18, 62, 81, 11, 97, 35], [55, 75, 38, 33, 42, 12, 92, 87, 96, 58], [109, 63, 101, 21, 54, 45, 46, 111, 41, 29], [114, 44, 115, 69, 116, 88, 93, 4, 24, 49], [37, 101, 42, 44, 43, 105, 91, 73, 38, 106, 10], [3, 19, 92, 32, 31, 106, 90, 58, 80, 64], [57, 37, 64, 87, 93, 56, 12, 20, 25, 35], [79, 116, 101, 71, 23, 81, 51, 65, 100, 3], [17, 56, 3, 35, 101, 79, 100, 102, 98, 104, 42], [27, 78, 55, 19, 82, 99, 43, 21, 2, 73, 18]]

# Compute the approximate transversals
transversals = compute_transversals(hypergraph)
print("Approximate Transversals:", transversals)